$customMessage = @"
                                                                                                           
     _,---.      _,---.    _,.----.  ,--.-,,-,--,    ,----.    _,.----.  ,--.-.,-.  
  .-.' ,  \  .-.' ,  \ .' .' -   \/==/  /|=|  | ,-.-- , \ .' .' -   \/==/- |\  \ 
 /==/_  _.-' /==/_  _.-'/==/  ,  ,-'|==|_ ||=|, ||==|-  _.-/==/  ,  ,-'|==|_ /_ / 
/==/-  '..-./==/-  '..-.|==|-   |  .|==| ,|/=| _||==|   .-.|==|-   |  .|==| ,   /  
|==|_ ,    /|==|_ ,    /|==|_   -' \==|- -' _ /==/_ ,    /|==|_   -' \==|-  .|   
|==|   .--' |==|   .--' |==|   _  , |==|  _     |==|    .-' |==|   _  , |==| _ , \  
|==|-  |    |==|-  |    \==\.       /==|   .-. ,\==|_  ,-._\==\.       /==/  '\  | 
/==/   \    /==/   \     -..___.-'/==/, //=/  /==/ ,     / -..___.-'\==\ /\=\.
-----'    -----'                ---' ----------`              --       
                                                                                                           
"@

Write-Host $customMessage -ForegroundColor Red

$filePath = "$env:USERPROFILE\Desktop\ExeFilesList.txt"
New-Item -Path $filePath -ItemType File -Force | Out-Null

$searchDirectories = @(
    [System.IO.Path]::Combine($env:USERPROFILE, "Downloads"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Documents"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Desktop"),
    [System.IO.Path]::Combine($env:USERPROFILE, "Pictures"),
    "C:\Program Files",
    "C:\Program Files (x86)",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Local"),
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Roaming"),
    "C:\Windows\System32",
    "C:\Windows\SysWOW64",
    "C:\Windows\Temp",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Local\Temp"),
    "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup",
    [System.IO.Path]::Combine($env:USERPROFILE, "AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"),
    "C:\Drivers",
    "C:\Configuration",
    "C:\Windows\System32\drivers",
    "C:\Windows\SysWOW64\drivers"
)

$registryPaths = @(
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\App Paths",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"
)

# URL to the raw file on GitHub containing the excluded paths
$excludedPathsUrl = "https://raw.githubusercontent.com/Leem-y/PCCHECKER/main/excluded_paths"

function Get-ExcludedPaths {
    $excludedPaths = @()
    try {
        $response = Invoke-WebRequest -Uri $excludedPathsUrl
        $excludedPaths = $response.Content -split "rn" | Where-Object { $_ -ne "" }
    } catch {
        Write-Output "Error downloading or processing the excluded paths list."
    }
    return $excludedPaths
}

function Get-ExePathsFromRegistry {
    param (
        [string]$regPath
    )
    
    $exePaths = @()
    
    try {
        $keys = Get-ItemProperty -Path $regPath -ErrorAction Stop
        foreach ($key in $keys.PSObject.Properties) {
            if ($key.Value -match "\.exe$") {
                $exePaths += [pscustomobject]@{
                    Path = $key.Value
                    LastAccessTime = [datetime]::MinValue
                    RegistryKey = $regPath
                }
            }
        }
    } catch {
        Write-Output "Error accessing registry path: $regPath"
    }
    
    return $exePaths
}

function Get-ExePathsFromRecycleBin {
    $recycleBinPath = [System.IO.Path]::Combine([System.IO.Path]::GetPathRoot($env:SystemDrive), '$Recycle.Bin')
    $exePaths = @()
    
    if (Test-Path $recycleBinPath) {
        $recycleBinItems = Get-ChildItem -Path $recycleBinPath -Recurse -Filter *.exe -ErrorAction SilentlyContinue
        foreach ($item in $recycleBinItems) {
            $exePaths += [pscustomobject]@{
                Path = $item.FullName
                LastAccessTime = $item.LastWriteTime
                RegistryKey = 'Recycle Bin'
            }
        }
    }
    
    return $exePaths
}

function Search-DirectoryForExes {
    param (
        [string]$directory
    )

    $exePaths = @()
    try {
        $exeFiles = Get-ChildItem -Path $directory -Filter *.exe -Recurse -File -ErrorAction SilentlyContinue
        foreach ($file in $exeFiles) {
            $exePaths += [pscustomobject]@{
                Path = $file.FullName
                LastAccessTime = (Get-Item $file.FullName).LastAccessTime
                RegistryKey = 'File System'
            }
        }
    } catch {
        Write-Output "Error accessing directory: $directory"
    }
    
    return $exePaths
}

$excludedPaths = Get-ExcludedPaths

$exeFilesFromDirectories = @()
foreach ($dir in $searchDirectories) {
    if (Test-Path $dir) {
        $exeFilesFromDirectories += Search-DirectoryForExes -directory $dir
    }
}

$exeFilesFromRegistry = @()
foreach ($regPath in $registryPaths) {
    $exeFilesFromRegistry += Get-ExePathsFromRegistry -regPath $regPath
}

$exeFilesFromRecycleBin = Get-ExePathsFromRecycleBin

$allExeFiles = $exeFilesFromDirectories + $exeFilesFromRegistry + $exeFilesFromRecycleBin

# Filter out the excluded paths
$filteredExeFiles = $allExeFiles | Where-Object { $excludedPaths -notcontains $_.Path }

$sortedExeFiles = $filteredExeFiles | Where-Object { $_.Path } | Sort-Object LastAccessTime -Descending

$exeFilesContent = $sortedExeFiles | Select-Object Path, LastAccessTime, RegistryKey |
                    Format-Table | Out-String

Set-Content -Path $filePath -Value "List of .exe files from specified directories, the registry, and the Recycle Bin sorted by most recent access time:rnrn$exeFilesContent"

Start-Process $filePath

Clear-Host
